# This is a basic workflow to help you get started with Actions
name: Main

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v3

      - name: Install the Apple certificate and provisioning profile
        env:
          DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          DISTRIBUTION_PROFILE_BASE64: ${{ secrets.DISTRIBUTION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          NAME_PROFILE=calistenia_app_red_social_provisioning_profile.mobileprovision
          DISTRIBUTION_CERTIFICATE_PATH=$RUNNER_TEMP/distribution_certificate.p12
          DIST_PROFILE_PATH=$RUNNER_TEMP/$NAME_PROFILE
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode --output $DISTRIBUTION_CERTIFICATE_PATH
          echo -n "$DISTRIBUTION_PROFILE_BASE64" | base64 --decode --output $DIST_PROFILE_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $DISTRIBUTION_CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $DIST_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Instalando el Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - run: npm ci

      - name: Set XCode Version
        run: sudo xcode-select -s /Applications/Xcode.app

      - name: Install pods
        run: |
          grep -rl "s.dependency 'React/Core'" node_modules/ | xargs sed -i '' 's=React/Core=React-Core=g'
          cd ios
          pod install --repo-update
        shell: bash
 
      - name: Build and test
        run: |
          cd ios
          /Applications/Xcode_14.2.app/Contents/Developer/usr/bin/xcodebuild \
          -workspace calistenia_rs_app.xcworkspace \
          -scheme calistenia_rs_app \
          clean archive \
          -archivePath "Actions" \
          -configuration "Release"  
      
      - name: Export IPA
        env:
          EXPORT_PLIST: ${{ secrets.EXPORT_PLIST }}
        run: |
          EXPORT_PLIST_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_PLIST" | base64 --decode --output $EXPORT_PLIST_PATH
          xcodebuild -exportArchive \
                    -archivePath $GITHUB_WORKSPACE/ios/Actions.xcarchive \
                    -exportOptionsPlist $EXPORT_PLIST_PATH \
                    -exportPath $RUNNER_TEMP/export \
                    -allowProvisioningUpdates

      - name: Upload IPA
        uses: actions/upload-artifact@master
        with:
          path: ${{ runner.temp }}/export/
      - name: Decode auth, api key file and save it
        env:
          API_KEY_BASE64: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        run: |
          mkdir -p $RUNNER_TEMP/private_keys
          ls $RUNNER_TEMP/private_keys
          echo -n "$API_KEY_BASE64" | base64 --decode --output $RUNNER_TEMP/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
          echo "After saving: "
          ls $RUNNER_TEMP/private_keys

      - name: Upload file to testFlight
        env:
          API_PRIVATE_KEYS_DIR: ${{ runner.temp }}/private_keys
        run: |
          echo "Start upload"
          ls $API_PRIVATE_KEYS_DIR

          xcrun altool --validate-app -f $RUNNER_TEMP/export/calistenia_rs_app.ipa \
                -t ios \
                --apiKey ${{ secrets.APPSTORE_API_KEY_ID }} \
                --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }}
                
          xcrun altool --upload-app -f $RUNNER_TEMP/export/calistenia_rs_app.ipa \
                -t ios \
                --apiKey ${{ secrets.APPSTORE_API_KEY_ID }} \
                --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }}

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/calistenia_app_red_social_provisioning_profile.mobileprovision
          rm ${{ runner.temp }}/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
